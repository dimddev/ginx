#!/usr/bin/env python3.5
"""
GinX a Graph Inspector
"""
import json
import click
from ginxcli.api.ginx_project import GinXBuilder
from ginxcli.api.ginx_query import GinXQuery
from ginxcli.api.ginx_paths import GinXPaths


# TODO
# 2. More segmented code, re-organaizing, refactoring, testing.
# 3. More commands and options to be provided


@click.group()
@click.option('-q', is_flag=True, help='Remove the head line before the result')
@click.option('-s', is_flag=True, help='Use matplotlib to draw shortpath(s) over the graph')
def main(q, s):
    """Graph Inspector
    """
    pass

@click.command()
@click.argument('INIT_FILE', nargs=1)
def project(init_file):
    """Init new project from json or csv files"""

    if init_file:
        djb = GinXBuilder()
        djb.init_from_file(init_file)

@click.command()
@click.argument('project_name', type=click.STRING)
@click.option('-f', type=click.STRING, help='From Node. Select the start node')
@click.option('-t', type=click.STRING, help='To Node. Select the end node')
@click.option('-P', is_flag=True, help='Use this when you look for shortest path')
@click.option('-A', is_flag=True, help='Use this when you look for all shortest paths')
@click.option('-s', is_flag=True, help='Use matplotlib to draw shortpath(s) over the graph')
@click.option('-O', is_flag=True, help='Save graph as png')
def gpath(project_name, f, t, s, p, a, o):
    """Get graph paths (SP) between nodeA and nodeB"""

    ginx_builder = GinXBuilder()

    if not f or not t:
        click.echo('From and To are required parameters')
        return False

    if not a and not p:
        click.echo('You have to provide -A or -P flag to complete this command')
        return False

    ginx_graph = GinXPaths(ginx_builder.load_project(project_name))

    if f and t and a and not p:

        s_paths = ginx_graph.get_shortest_paths(f, t)
        click.echo(s_paths)

        if s:
            ginx_graph.showme_path(json.loads(s_paths))

        return True

    if f and t and p and not a:

        s_path = ginx_graph.get_shortest_path(f, t)
        click.echo(s_path)

        if s:
            ginx_graph.showme_path(json.loads(s_path))

        return True

@click.command()
@click.argument('project_name', type=click.STRING)
@click.option('-c', is_flag=True, help='Compute current-flow closeness centrality for nodes (information centrality)')
@click.option('-b', is_flag=True, help='Return subgraph communicability for all pairs of nodes in G.')
@click.option('-f', is_flag=True, help='Print the current flow betweenness centrality. Current-flow betweenness')
@click.option('-w', is_flag=True, help='Compute the shortest-path betweenness centrality for nodes')
@click.option('-m', is_flag=True, help='Finds communities in a graph using the Girvanâ€“Newman method')
@click.option('-t', is_flag=True, help='Print the numbers of triangles that include a node as one vertex')
@click.option('-s', is_flag=True, help='Use matplotlib to draw the graph')
def gquery(project_name, c, b, f, s, t, m, w):
    """gquery - perform statistical operations"""

    djb = GinXBuilder()

    ginx_graph = GinXQuery(djb.load_project(project_name))

    flags = (c, b, f, s, t, m, w, )

    if c:

        result = ginx_graph.current_flow_closeness_centrality()
        click.echo(result)

        if s:
            ginx_graph.showme_centrality(
            # ginx_graph.showbar(
                json.loads(result),
                'Current Flow Closseness Centrality for: {}'.format(project_name) # , project_name
            )

        return

    if b:

        result = ginx_graph.communicability_betweenness_centrality()
        click.echo(result)

        if s:

            ginx_graph.showbar(
                json.loads(result),
                'Communicability Betweenness Centrality for: {}'.format(project_name), project_name
            )

        return

    if f:

        result = ginx_graph.current_flow_betweenness_centrality()
        click.echo(result)

        if s:
            result = [(d[0], d[1]) for d in json.loads(result)]
            ginx_graph.showbar(
                result,
                'Current Flow Betweenness Centrality for: {}'.format(project_name), project_name
            )

        return

    if t:

        result = ginx_graph.triangles()
        click.echo(result)

        if s:

            result = list(json.loads(result).items())
            ginx_graph.showbar(
                result,
                'Numbers of triangles for: {}'.format(project_name), project_name
            )

        return

    if m:
        print(ginx_graph.girvan_newman())

    if w:

        result = ginx_graph.betweeness_centrality()
        click.echo(result)

        if s:

            ginx_graph.showme_centrality(
                json.loads(result),
                'Betweeness centrality for {}'.format(project_name)
            )

        return

    if s:

        center = json.loads(ginx_graph.d_central())
        periphery = json.loads(ginx_graph.d_periphery())
        ginx_graph.showme_center_periphery(center, periphery)

@click.command()
def docker():
    """GinX use docker container as computing machine.
    All dependecies are installed there."""
    pass

@click.command()
def aws():
    """GinX use AWS as computing architecture. Using S3, Lambdas and more"""
    pass

if __name__ == '__main__':
    main.add_command(project)
    main.add_command(gquery)
    main.add_command(gpath)
    main.add_command(aws)
    main.add_command(docker)
    main()
